#include <iostream>
#include <pybind11/pybind11.h>
#include <pybind11/numpy.h>
#include <pybind11/stl.h>
#include <multem/multem_ext.h>

namespace py = pybind11;

PYBIND11_MODULE(multem_ext, m)
{
  m.def("is_gpu_available", &is_gpu_available_wrapper);
  m.def("number_of_gpu_available", &number_of_gpu_available_wrapper);

  py::class_<SystemConfigurationWrapper>(m, "SystemConfiguration")
    .def(py::init<>())
    .def(
      py::init<
        const char *,
        const char *,
        int,
        int,
        int,
        int>(), 
      py::arg("device") = "host",
      py::arg("precision") = "float",
      py::arg("cpu_ncores") = 1,
      py::arg("cpu_nthread") = 1,
      py::arg("gpu_device") = 0,
      py::arg("gpu_stream") = 1)
    .def("get_device", &SystemConfigurationWrapper::get_device)
    .def("is_host", &SystemConfigurationWrapper::is_host)
    .def("is_device", &SystemConfigurationWrapper::is_device)
    .def("is_float", &SystemConfigurationWrapper::is_float)
    .def("is_double", &SystemConfigurationWrapper::is_double)
    .def("is_float_host", &SystemConfigurationWrapper::is_float_host)
    .def("is_double_host", &SystemConfigurationWrapper::is_double_host)
    .def("is_float_device", &SystemConfigurationWrapper::is_float_device)
    .def("is_double_device", &SystemConfigurationWrapper::is_double_device)
    ;

  py::class_<InputMultisliceWrapper>(m, "InputMultislice")
    .def(py::init<>())
    .def("set_system_conf", &InputMultisliceWrapper::set_system_conf)
    .def("set_interaction_model", &InputMultisliceWrapper::set_interaction_model)
    .def("set_potential_type", &InputMultisliceWrapper::set_potential_type)
    .def("set_pn_model", &InputMultisliceWrapper::set_pn_model)
    .def("set_pn_coh_contrib", &InputMultisliceWrapper::set_pn_coh_contrib)
    .def("set_pn_single_conf", &InputMultisliceWrapper::set_pn_single_conf)
    .def("set_fp_dist", &InputMultisliceWrapper::set_fp_dist)
    .def("set_pn_seed", &InputMultisliceWrapper::set_pn_seed)
    .def("set_pn_nconf", &InputMultisliceWrapper::set_pn_nconf)
    .def("set_fp_iconf_0", &InputMultisliceWrapper::set_fp_iconf_0)
    .def("set_is_crystal", &InputMultisliceWrapper::set_is_crystal)
    .def("set_spec_rot_theta", &InputMultisliceWrapper::set_spec_rot_theta)
    .def("set_spec_rot_center_type", &InputMultisliceWrapper::set_spec_rot_center_type)
    .def("set_thick_type", &InputMultisliceWrapper::set_thick_type)
    .def("set_potential_slicing", &InputMultisliceWrapper::set_potential_slicing)
    .def("set_simulation_type", &InputMultisliceWrapper::set_simulation_type)
    .def("set_iw_type", &InputMultisliceWrapper::set_iw_type)
    .def("set_E_0", &InputMultisliceWrapper::set_E_0)
    .def("set_lambda", &InputMultisliceWrapper::set_lambda)
    .def("set_theta", &InputMultisliceWrapper::set_theta)
    /* .def("set_phi", &InputMultisliceWrapper::set_phi) */
    .def("set_illumination_model", &InputMultisliceWrapper::set_illumination_model)
    .def("set_operation_mode", &InputMultisliceWrapper::set_operation_mode)
    .def("set_slice_storage", &InputMultisliceWrapper::set_slice_storage)
    .def("set_mul_sign", &InputMultisliceWrapper::set_mul_sign)
    .def("set_Vrl", &InputMultisliceWrapper::set_Vrl)
    .def("set_nR", &InputMultisliceWrapper::set_nR)
    .def("set_nrot", &InputMultisliceWrapper::set_nrot)
    .def("set_cdl_var_type", &InputMultisliceWrapper::set_cdl_var_type)
    .def("set_islice", &InputMultisliceWrapper::set_islice)
    .def("set_dp_Shift", &InputMultisliceWrapper::set_dp_Shift)
    .def("assign", &InputMultisliceWrapper::assign)
    .def("validate_parameters", &InputMultisliceWrapper::validate_parameters)
    .def("set_reverse_multislice", &InputMultisliceWrapper::set_reverse_multislice)
    .def("validate_output_area", &InputMultisliceWrapper::validate_output_area)
    .def("set_iscan_beam_position", &InputMultisliceWrapper::set_iscan_beam_position)
    .def("set_incident_angle", &InputMultisliceWrapper::set_incident_angle)
    .def("get_phonon_rot_weight", &InputMultisliceWrapper::get_phonon_rot_weight)
    /* .def("set_phi", &InputMultisliceWrapper::set_phi) */
    .def("get_propagator_factor", &InputMultisliceWrapper::get_propagator_factor)
    .def("Vr_factor", &InputMultisliceWrapper::Vr_factor)
    .def("gx_0", &InputMultisliceWrapper::gx_0)
    .def("gy_0", &InputMultisliceWrapper::gy_0)
    .def("number_conf", &InputMultisliceWrapper::number_conf)
    .def("number_of_beams", &InputMultisliceWrapper::number_of_beams)
    .def("is_multi_beam", &InputMultisliceWrapper::is_multi_beam)
    .def("is_spec_rot_active", &InputMultisliceWrapper::is_spec_rot_active)
    .def("is_multislice", &InputMultisliceWrapper::is_multislice)
    .def("is_phase_object", &InputMultisliceWrapper::is_phase_object)
    .def("is_weak_phase_object", &InputMultisliceWrapper::is_weak_phase_object)
    .def("is_still_atom", &InputMultisliceWrapper::is_still_atom)
    .def("is_absorptive_model", &InputMultisliceWrapper::is_absorptive_model)
    .def("is_frozen_phonon", &InputMultisliceWrapper::is_frozen_phonon)
    .def("is_frozen_phonon_single_conf", &InputMultisliceWrapper::is_frozen_phonon_single_conf)
    .def("is_whole_spec", &InputMultisliceWrapper::is_whole_spec)
    .def("is_through_slices", &InputMultisliceWrapper::is_through_slices)
    .def("is_through_thick", &InputMultisliceWrapper::is_through_thick)
    .def("is_slicing_by_planes", &InputMultisliceWrapper::is_slicing_by_planes)
    .def("is_slicing_by_dz", &InputMultisliceWrapper::is_slicing_by_dz)
    .def("is_subslicing", &InputMultisliceWrapper::is_subslicing)
    .def("is_subslicing_whole_spec", &InputMultisliceWrapper::is_subslicing_whole_spec)
    .def("is_plane_wave", &InputMultisliceWrapper::is_plane_wave)
    .def("is_convergent_wave", &InputMultisliceWrapper::is_convergent_wave)
    .def("is_user_define_wave", &InputMultisliceWrapper::is_user_define_wave)
    .def("is_STEM", &InputMultisliceWrapper::is_STEM)
    .def("is_ISTEM", &InputMultisliceWrapper::is_ISTEM)
    .def("is_CBED", &InputMultisliceWrapper::is_CBED)
    .def("is_CBEI", &InputMultisliceWrapper::is_CBEI)
    .def("is_ED", &InputMultisliceWrapper::is_ED)
    .def("is_HRTEM", &InputMultisliceWrapper::is_HRTEM)
    .def("is_PED", &InputMultisliceWrapper::is_PED)
    .def("is_HCTEM", &InputMultisliceWrapper::is_HCTEM)
    .def("is_EWFS", &InputMultisliceWrapper::is_EWFS)
    .def("is_EWRS", &InputMultisliceWrapper::is_EWRS)
    .def("is_EWFS_SC", &InputMultisliceWrapper::is_EWFS_SC)
    .def("is_EWRS_SC", &InputMultisliceWrapper::is_EWRS_SC)
    .def("is_EELS", &InputMultisliceWrapper::is_EELS)
    .def("is_EFTEM", &InputMultisliceWrapper::is_EFTEM)
    .def("is_IWFS", &InputMultisliceWrapper::is_IWFS)
    .def("is_IWRS", &InputMultisliceWrapper::is_IWRS)
    .def("is_PPFS", &InputMultisliceWrapper::is_PPFS)
    .def("is_PPRS", &InputMultisliceWrapper::is_PPRS)
    .def("is_TFFS", &InputMultisliceWrapper::is_TFFS)
    .def("is_TFRS", &InputMultisliceWrapper::is_TFRS)
    .def("is_PropFS", &InputMultisliceWrapper::is_PropFS)
    .def("is_PropRS", &InputMultisliceWrapper::is_PropRS)
    .def("is_STEM_ISTEM", &InputMultisliceWrapper::is_STEM_ISTEM)
    .def("is_CBED_CBEI", &InputMultisliceWrapper::is_CBED_CBEI)
    .def("is_ED_HRTEM", &InputMultisliceWrapper::is_ED_HRTEM)
    .def("is_PED_HCTEM", &InputMultisliceWrapper::is_PED_HCTEM)
    .def("is_EWFS_EWRS", &InputMultisliceWrapper::is_EWFS_EWRS)
    .def("is_EWFS_EWRS_SC", &InputMultisliceWrapper::is_EWFS_EWRS_SC)
    .def("is_EELS_EFTEM", &InputMultisliceWrapper::is_EELS_EFTEM)
    .def("is_IWFS_IWRS", &InputMultisliceWrapper::is_IWFS_IWRS)
    .def("is_PPFS_PPRS", &InputMultisliceWrapper::is_PPFS_PPRS)
    .def("is_TFFS_TFRS", &InputMultisliceWrapper::is_TFFS_TFRS)
    .def("is_PropFS_PropRS", &InputMultisliceWrapper::is_PropFS_PropRS)
    .def("is_grid_FS", &InputMultisliceWrapper::is_grid_FS)
    .def("is_grid_RS", &InputMultisliceWrapper::is_grid_RS)
    .def("is_simulation_type_FS", &InputMultisliceWrapper::is_simulation_type_FS)
    .def("is_simulation_type_RS", &InputMultisliceWrapper::is_simulation_type_RS)
    .def("is_specimen_required", &InputMultisliceWrapper::is_specimen_required)
    .def("is_ISTEM_CBEI_HRTEM_HCTEM_EFTEM", &InputMultisliceWrapper::is_ISTEM_CBEI_HRTEM_HCTEM_EFTEM)
    .def("is_CBED_ED_EWFS_PED", &InputMultisliceWrapper::is_CBED_ED_EWFS_PED)
    .def("is_obj_lens_temp_spat", &InputMultisliceWrapper::is_obj_lens_temp_spat)
    .def("is_cond_lens_temp_spat", &InputMultisliceWrapper::is_cond_lens_temp_spat)
    .def("is_scanning", &InputMultisliceWrapper::is_scanning)
    .def("is_illu_mod_coherent", &InputMultisliceWrapper::is_illu_mod_coherent)
    .def("is_illu_mod_partial_coherent", &InputMultisliceWrapper::is_illu_mod_partial_coherent)
    .def("is_illu_mod_trans_cross_coef", &InputMultisliceWrapper::is_illu_mod_trans_cross_coef)
    .def("is_illu_mod_full_integration", &InputMultisliceWrapper::is_illu_mod_full_integration)
    .def("is_incoh_temporal_spatial", &InputMultisliceWrapper::is_incoh_temporal_spatial)
    .def("is_incoh_temporal", &InputMultisliceWrapper::is_incoh_temporal)
    .def("is_incoh_spatial", &InputMultisliceWrapper::is_incoh_spatial)
    .def("is_detector_circular", &InputMultisliceWrapper::is_detector_circular)
    .def("is_detector_radial", &InputMultisliceWrapper::is_detector_radial)
    .def("is_detector_matrix", &InputMultisliceWrapper::is_detector_matrix)
    .def("is_slice_storage", &InputMultisliceWrapper::is_slice_storage)
    .def("is_operation_mode_normal", &InputMultisliceWrapper::is_operation_mode_normal)
    .def("is_operation_mode_advanced", &InputMultisliceWrapper::is_operation_mode_advanced)
    .def("is_lvt_off", &InputMultisliceWrapper::is_lvt_off)
    .def("is_lvt_m", &InputMultisliceWrapper::is_lvt_m)
    .def("is_lvt_Cs3", &InputMultisliceWrapper::is_lvt_Cs3)
    .def("is_lvt_Cs5", &InputMultisliceWrapper::is_lvt_Cs5)
    .def("is_lvt_mfa2", &InputMultisliceWrapper::is_lvt_mfa2)
    .def("is_lvt_afa2", &InputMultisliceWrapper::is_lvt_afa2)
    .def("is_lvt_mfa3", &InputMultisliceWrapper::is_lvt_mfa3)
    .def("is_lvt_afa3", &InputMultisliceWrapper::is_lvt_afa3)
    .def("is_lvt_inner_aper_ang", &InputMultisliceWrapper::is_lvt_inner_aper_ang)
    .def("is_lvt_outer_aper_ang", &InputMultisliceWrapper::is_lvt_outer_aper_ang)
    ;
}
